from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    CallbackContext,
    filters
)
import re

TOKEN = "7652644354:AAFoamIjw_7YU8jH9ypBfklCOHQqG-gLlyE"

# –ö—É—Ä—Å—ã –æ–±–º–µ–Ω–∞
UAH_TO_RUB = 1.7  # 1 –≥—Ä–∏–≤–Ω–∞ = 1.7 —Ä—É–±–ª—è
RUB_TO_UAH = 2.4  # 1 —Ä—É–±–ª—å = 2.4 –≥—Ä–∏–≤–Ω—ã

def get_keyboard():
    keyboard = [
        [InlineKeyboardButton("–ì—Ä–∏–≤–Ω—ã ‚Üí –†—É–±–ª–∏", callback_data='uah_rub')],
        [InlineKeyboardButton("–†—É–±–ª–∏ ‚Üí –ì—Ä–∏–≤–Ω—ã", callback_data='rub_uah')],
    ]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "üîπ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å:\n"
        "‚Ä¢ <code>1000 —Ä—É–±–ª–µ–π –≤ –≥—Ä–∏–≤–Ω—ã</code>\n"
        "‚Ä¢ <code>500 –≥—Ä–∏–≤–µ–Ω –≤ —Ä—É–±–ª–∏</code>",
        reply_markup=get_keyboard(),
        parse_mode="HTML"
    )

async def button_click(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    if query.data == 'uah_rub':
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –≥—Ä–∏–≤–Ω–∞—Ö:",
            reply_markup=get_keyboard()
        )
        context.user_data['mode'] = 'uah_rub'
    elif query.data == 'rub_uah':
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö:",
            reply_markup=get_keyboard()
        )
        context.user_data['mode'] = 'rub_uah'

async def handle_text_request(update: Update, context: CallbackContext):
    text = update.message.text.lower()
    
    amount_match = re.search(r'(\d+\.?\d*)', text.replace(',', '.'))
    if not amount_match:
        await update.message.reply_text(
            "‚ùå –ù–µ –≤–∏–∂—É —Å—É–º–º—É –¥–ª—è –æ–±–º–µ–Ω–∞. –ü—Ä–∏–º–µ—Ä: <i>100 —Ä—É–±–ª–µ–π –≤ –≥—Ä–∏–≤–Ω—ã</i>",
            parse_mode="HTML",
            reply_markup=get_keyboard()
        )
        return
    
    amount = float(amount_match.group(1))
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    if any(word in text for word in ["—Ä—É–±–ª", "—Ä.", "—Ä ", "‚ÇΩ"]):
        if any(word in text for word in ["–≤ –≥—Ä–Ω", "–≤ –≥—Ä–∏–≤", "–≥—Ä–Ω", "–≥—Ä–∏–≤", "‚Ç¥"]):
            # RUB ‚Üí UAH
            result = amount * RUB_TO_UAH
            await update.message.reply_text(
                f"üí∏ <b>{amount}‚ÇΩ ‚Üí {result:.2f}‚Ç¥</b>\n"
                f"–ö—É—Ä—Å: 1 —Ä—É–±–ª—å = {RUB_TO_UAH}‚Ç¥",
                parse_mode="HTML",
                reply_markup=get_keyboard()
            )
        else:
            await update.message.reply_text(
                "–£–∫–∞–∂–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏. –ü—Ä–∏–º–µ—Ä: '100 —Ä—É–±–ª–µ–π –≤ –≥—Ä–∏–≤–Ω—ã'",
                reply_markup=get_keyboard()
            )
    elif any(word in text for word in ["–≥—Ä–∏–≤", "–≥—Ä–Ω", "‚Ç¥"]):
        if any(word in text for word in ["–≤ —Ä—É–±", "–≤ —Ä—É–±–ª", "—Ä—É–±–ª", "—Ä.", "—Ä ", "‚ÇΩ"]):
            # UAH ‚Üí RUB
            result = amount * UAH_TO_RUB
            await update.message.reply_text(
                f"üí∏ <b>{amount}‚Ç¥ ‚Üí {result:.2f}‚ÇΩ</b>\n"
                f"–ö—É—Ä—Å: 1 –≥—Ä–∏–≤–Ω–∞ = {UAH_TO_RUB}‚ÇΩ",
                parse_mode="HTML",
                reply_markup=get_keyboard()
            )
        else:
            # UAH ‚Üí RUB –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            result = amount * UAH_TO_RUB
            await update.message.reply_text(
                f"üí∏ <b>{amount}‚Ç¥ ‚Üí {result:.2f}‚ÇΩ</b>\n"
                f"–ö—É—Ä—Å: 1 –≥—Ä–∏–≤–Ω–∞ = {UAH_TO_RUB}‚ÇΩ",
                parse_mode="HTML",
                reply_markup=get_keyboard()
            )
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞–ª—é—Ç—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–≥—Ä–∏–≤–Ω—ã' –∏–ª–∏ '—Ä—É–±–ª–∏'",
            parse_mode="HTML",
            reply_markup=get_keyboard()
        )

async def handle_message(update: Update, context: CallbackContext):
    if 'mode' in context.user_data:
        try:
            amount = float(update.message.text.replace(',', '.'))
            if amount <= 0:
                raise ValueError
                
            if context.user_data['mode'] == 'uah_rub':
                result = amount * UAH_TO_RUB
                await update.message.reply_text(
                    f"üíµ <b>{amount}‚Ç¥ ‚Üí {result:.2f}‚ÇΩ</b>\n"
                    f"–ö—É—Ä—Å: 1 –≥—Ä–∏–≤–Ω–∞ = {UAH_TO_RUB}‚ÇΩ",
                    parse_mode="HTML",
                    reply_markup=get_keyboard()
                )
            elif context.user_data['mode'] == 'rub_uah':
                result = amount * RUB_TO_UAH
                await update.message.reply_text(
                    f"üíµ <b>{amount}‚ÇΩ ‚Üí {result:.2f}‚Ç¥</b>\n"
                    f"–ö—É—Ä—Å: 1 —Ä—É–±–ª—å = {RUB_TO_UAH}‚Ç¥",
                    parse_mode="HTML",
                    reply_markup=get_keyboard()
                )
                
            context.user_data.pop('mode', None)
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.",
                reply_markup=get_keyboard()
            )
    else:
        await handle_text_request(update, context)

def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_click))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()

if __name__ == "__main__":
    main()
