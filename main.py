from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    CallbackContext,
    Application
)

TOKEN = "7652644354:AAFoamIjw_7YU8jH9ypBfklCOHQqG-gLlyE"

# –ö—É—Ä—Å—ã –æ–±–º–µ–Ω–∞
UAH_TO_RUB = 1.7  # 1 –≥—Ä–∏–≤–Ω–∞ = 1.7 —Ä—É–±–ª—è
RUB_TO_UAH = 2.4  # 1 —Ä—É–±–ª—å = 2.4 –≥—Ä–∏–≤–Ω—ã

async def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("–ì—Ä–∏–≤–Ω—ã ‚Üí –†—É–±–ª–∏", callback_data='uah_rub')],
        [InlineKeyboardButton("–†—É–±–ª–∏ ‚Üí –ì—Ä–∏–≤–Ω—ã", callback_data='rub_uah')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üîπ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞:",
        reply_markup=reply_markup
    )

async def button_click(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    if query.data == 'uah_rub':
        await query.edit_message_text(
            f"<b>–ì—Ä–∏–≤–Ω—ã ‚Üí –†—É–±–ª–∏</b>\n"
            f"–ö—É—Ä—Å: 1 –≥—Ä–∏–≤–Ω–∞ = {UAH_TO_RUB}‚ÇΩ\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –≥—Ä–∏–≤–Ω–∞—Ö:",
            parse_mode="HTML"
        )
        context.user_data['mode'] = 'uah_rub'

    elif query.data == 'rub_uah':
        await query.edit_message_text(
            f"<b>–†—É–±–ª–∏ ‚Üí –ì—Ä–∏–≤–Ω—ã</b>\n"
            f"–ö—É—Ä—Å: 1 —Ä—É–±–ª—å = {RUB_TO_UAH}‚Ç¥\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö:",
            parse_mode="HTML"
        )
        context.user_data['mode'] = 'rub_uah'

async def handle_message(update: Update, context: CallbackContext):
    if 'mode' not in context.user_data:
        return await start(update, context)

    try:
        amount = float(update.message.text)
        if amount <= 0:
            raise ValueError

        if context.user_data['mode'] == 'uah_rub':
            result = amount * UAH_TO_RUB
            await update.message.reply_text(
                f"üíµ <b>{amount}‚Ç¥ ‚Üí {result:.2f}‚ÇΩ</b>",
                parse_mode="HTML"
            )
        elif context.user_data['mode'] == 'rub_uah':
            result = amount * RUB_TO_UAH
            await update.message.reply_text(
                f"üíµ <b>{amount}‚ÇΩ ‚Üí {result:.2f}‚Ç¥</b>",
                parse_mode="HTML"
            )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é
        await start(update, context)

    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0).")

def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_click))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling()

if __name__ == "__main__":
    main()
